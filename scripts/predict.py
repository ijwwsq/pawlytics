import tensorflow as tf
import numpy as np
import argparse
import os
from tensorflow.keras.preprocessing import image

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  
MODEL_PATH = os.path.join(BASE_DIR, '../models/best_model.h5')  

IMG_SIZE = (128, 128)  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
model = tf.keras.models.load_model(MODEL_PATH)

def predict_image(image_path):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∫—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ: –∫–æ—à–∫–∞ –∏–ª–∏ —Å–æ–±–∞–∫–∞"""
    img = image.load_img(image_path, target_size=IMG_SIZE)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_array = image.img_to_array(img) / 255.0  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    img_array = np.expand_dims(img_array, axis=0)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞

    prediction = model.predict(img_array)[0][0]  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predicted_class = '–°–æ–±–∞–∫–∞' if prediction > 0.5 else '–ö–æ—à–∫–∞'  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å
    confidence = max(prediction, 1 - prediction) * 100  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏

    print(f'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}')
    print(f'üêæ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predicted_class} ({confidence:.2f}%)')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ—à–∫–∞ –∏–ª–∏ —Å–æ–±–∞–∫–∞)")
    parser.add_argument("image_path", type=str, help="–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    args = parser.parse_args()

    predict_image(args.image_path)
