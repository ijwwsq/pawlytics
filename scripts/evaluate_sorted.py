import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
model = MobileNetV2(weights="imagenet")

# –ü—É—Ç–∏ –∫ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
cat_path = "data/cats_dogs/test1/cats"
dog_path = "data/cats_dogs/test1/dogs"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    preds = model.predict(img_array)
    decoded = decode_predictions(preds, top=1)[0][0]  # –ë–µ—Ä—ë–º —Ç–æ–ø-1 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    label = decoded[1]

    return "cat" if "cat" in label else "dog"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
correct = 0
total = 0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ª–µ–∂–∞—Ç –∫–æ—Ç—ã
for filename in os.listdir(cat_path):
    file_path = os.path.join(cat_path, filename)
    if os.path.isfile(file_path):
        total += 1
        if predict(file_path) == "cat":
            correct += 1

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ª–µ–∂–∞—Ç —Å–æ–±–∞–∫–∏
for filename in os.listdir(dog_path):
    file_path = os.path.join(dog_path, filename)
    if os.path.isfile(file_path):
        total += 1
        if predict(file_path) == "dog":
            correct += 1

# –í—ã–≤–æ–¥ —Ç–æ—á–Ω–æ—Å—Ç–∏
accuracy = correct / total * 100
print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {accuracy:.2f}% ({correct}/{total})")
